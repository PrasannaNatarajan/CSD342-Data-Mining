T == T
TRUE == TRUE
(FALSE == TRUE) == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6<7
10<=10
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5>8 || 6!=8 && 4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
submit()
remainder(10)
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(deviance,c(1.4,3.6,7.9,8.8))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
SUBMIT()
submit()
telegram("whatever")
submit()
mad_libs(c("place"="trichy","adjective" = "technical","noun"="prasanna"))
mad_libs(c(place="trichy",adjective = "technical",noun="prasanna"))
mad_libs(place="trichy",adjective = "technical",noun="prasanna")
submit()
submit()
"I"%p%"love"%p%"R"
"I"%p%"love"%p%"R!"
pause
stop()
bye()
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays.Date(d1)
weekdays(d1)
months(t1)
quakes
quarters(t2)
t3 <-  "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
getwd()
swirl()
head(flags)
dim(flags)
class(falgs)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals,length)
sapply(flags, unique)
lapply(unique_vals, function(elem),elem[2])
lapply(unique_vals, function(elem) elem[2])
swirl90
swirl()
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population,flags$landmass,summary)
a<-matrix(c(1:16),nrow = 4,ncol = 4)
a
?matrix
a<-matrix(c(1:16),nrow = 4,ncol = 4,byrow = T)
a
a%*%a
a<-matrix(c(1,2,5,6),nrow=2,ncol=2,byrow=T)
a
b<-matrix(rep(-8,4)),nrow=2,ncol=2,byrow=T)
rep(4)
rep(4,4)
b<-matrix(rep(-8,4),nrow=2,ncol=2,byrow=T)
a%*%b
x<-matrix(c(7,3,3,5))
x
x<-matrix(c(7,3,3,5),nrow = 2,ncol)
x<-matrix(c(7,3,3,5),nrow = 2,ncol = 2)
x
y<-matrix(c(6,9,2,8),nrow = 2,ncol = 2)
y
y<-matrix(c(6,9,2,8),nrow = 2,ncol = 2,byrow = TRUE)
y
x%8%y
x%*%y
x<-matrix(c(4,0,8,3),nrow=2,ncol=2)
x
y<-matrix(c(8,9,0,8),nrow=2,ncol=2)
y
x%*%y
installed.packages("igraph")
install.packages("igraph")
install.packages("network")
network
?network
install.packages('sna')
install.packages('ndtv')
install.packages('visNetwork')
plot(x=1:10, y=rep(5,10), pch=19, cex=3, col="dark red")
points(x=1:10, y=rep(6, 10), pch=19, cex=3, col="557799")
points(x=1:10, y=rep(4, 10), pch=19, cex=3, col=rgb(.25, .5, .3))
plot(x=1:5, y=rep(5,5), pch=19, cex=12, col=rgb(.25, .5, .3, alpha=.5), xlim=c(0,6))
par(bg="gray40")
col.tr <- grDevices::adjustcolor("557799", alpha=0.7)
plot(x=1:5, y=rep(5,5), pch=19, cex=12, col=col.tr, xlim=c(0,6))
colors()
grep("blue", colors(), value=T)
install.packages('RColorBrewer')
library('RColorBrewer')
display.brewer.all()
install.packages('extrafont')
library('extrafont')
font_import()
sr732
x<-c(3,4,5,6,7,8)
x[x<6]
x[x<6]<-0
x
summary(x)
x<7
x<6
x<-c(1:9)
x
x[x<6]<-0
x
x<6
x
x<-c(1,TRUE)
x
x<-c(TRUE,1)
x
class(x)
x<-c(TRUE,'a')
class(x)
x<-c(1,'a')
class(x)
x<-c(1,3,5)
y<c(3,2,10)
y<-c(3,2,10)
rbind(x,y)
cbind(x,y)
x<-list(2,"a",c(1,2))
x[1]
x[[1]
]
x<-c(1:6)
x
x[x<3]<-0
x
datasets::airmiles
d<-airmiles
d
x<-seq(0,1,6)
x
x<-seq(0,1,length=6)
x
summary(x)
runif(10)
plot(runif(10))
plot(runif(10))
plot(runif(10))
plot(runif(10))
plot(runif(10))
plot(runif(10))
plot(runif(10))
plot(runif(10))
plot(runif(10))
plot(runif(10))
plot(runif(10,n = 10))
plot(runif(10,n = 10,min = 1,max=1000))
plot(runif(n = 10,min = 1,max=1000))
plot(runif(n = 10,min = 1,max=1000))
plot(runif(n = 10,min = 1,max=1000))
plot(runif(n = 10,min = 1,max=1000))
plot(runif(n = 10,min = 1,max=1000))
plot(runif(n = 10,min = 1,max=1000))
plot(runif(n = 10,min = 1,max=1000))
dnow <- data.frame(x=rnorm(100), y=runif(100))
dnow
dnow.head()
dnow.head
head(dnow)
head(dnow,4)
dnow[,]
dnow.x
dnow$x
dnow <- data.frame(x=rnorm(100), y=runif(100),z=runif(100,min=0,max=1))
dnow
dnow[,"z"]
dnow[,"z",drop=FALSE]
dnow[,"z","Y",drop=FALSE]
dnow[,"z","y",drop=FALSE]
dnow[,"y z",drop=FALSE]
dnow[,c(2,3),drop=FALSE]
dnow[,c(2,3)]
v<-c(matrix(1:10,nrows=5,ncol=2),1)
v<-c(matrix(1:10,nrow=5,ncol=2),1)
v
v<-c(matrix(1:10,nrow=5,ncol=2),matrix(1:100,nrow=10,ncol=10))
v
class(v)
class(c(1:10))
class(seq(1,10))
class(seq(1,10,5))
(seq(1,10,5))
seq(1,10)
seq(1,10,1)
seq(1,10,2)
seq(1,10,0.00000000000000009)
seq(1,10,0.00000000009)
seq(1,10,0.00009)
rep(1:10)
rep(1:10,each=110)
rep(1:10,each=10)
rep(0)
rep(0,10)
rep(0:20,10)
rep(0:20,x = 1)
rep(0:20,x = 20)
rep(0:20,times=10)
rep(0:20,each=10)
c(1,T)
c(1,F)
c(T,F)
x <- c(4, “a”, TRUE)
x <- c(4, "a", TRUE)
x
class(x)
paste("a", "b", se = ":")
paste("a", "b", sep = ":")
f <- function(num = 1) {
+        hello <- "Hello, world!\n"
+        for(i in seq_len(num)) {
+                cat(hello)
+         }
+         chars <- nchar(hello) * num
+         chars
+ }
lm
d<-"Hello World\n"
d
nchars(d)
nchar(d)
d<-"Hello World\n"
class(c(1L,2))
args(paste)
nobs()
?nobs()
x<-4
class(x)
x<-4L
class(x)
cbind(1:4,5:8,9:12,0)
rbind(1:4,5:8,9:12,0)
x<-1
x
msg<-'hello'
print msg
msg
print(msg)
msg
x<-1:10
x
cbind(x)
cbind(x,1:2)
cbind(x,1:20)
x<5
x<-5
x
1/Inf
mean(Inf,NaN,1,2,3)
mean(1,2,3)
mean(1,2,3,Inf)
mean(1,2,3,NaN)
mean(1,2,3,NaN,Inf)
mean(2,3,NaN,Inf)
mean(2,3,NaN,Inf,na.rm=FALSE)
mean(3,NaN,Inf,na.rm=FALSE)
mean(3,na,Inf,na.rm=FALSE)
mean(3,NA,Inf,na.rm=FALSE)
iris
mean(iris)
mean(iris$Sepal.Length)
iris.lapply()
?lapply()
lapply(iris$Sepal.Length,iris$Sepal.Length+iris$Sepal.Width)
f<-function(x){}
f<-function(x){}
f<-function(x){x<-x+x}
lapply(iris$Sepal.Length,f)
if(x<5){}
if(x<5){x}
x
if(x=5){x}
if(x==5){x}
join
select.list(iris)
select.list(iris)
mean()
args(mean)
function(mean)
Error in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededquit
View(`%p%`)
View(`%p%`)
paste(1:10,c(10:100000))
1:10%p%c(10:100)
View(boring_function)
View(boring_function)
View(evaluate)
View(evaluate)
View(f)
View(my_mean)
View(telegram)
airquality
set.seed(1)
rpois(5,2)
?dpois
setwd("~/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R")
load("~/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/.RData")
files
Rpdf <- readPDF(control = list(text = "-layout"))
library(tm)
Rpdf <- readPDF(control = list(text = "-layout"))
opinions <- Corpus(URISource(files),
readerControl = list(reader = Rpdf))
opinions
opinions.array <- content(content(corpus)[[1]])
corpus <- Corpus(URISource(files),
readerControl = list(reader = Rpdf))
corpus.array <- content(content(corpus)[[1]])
corpus.array
library(tm)
files <- list.files(pattern = "pdf$")
Rpdf <- readPDF(control = list(text = "-layout"))
corpus <- VCorpus(URISource(files[0]),
readerControl = list(reader = Rpdf))
corpus.array <- content(content(corpus)[[1]]) ## Store each line in an array
library(tm)
files <- list.files(pattern = "pdf$")
Rpdf <- readPDF(control = list(text = "-layout"))
corpus <- VCorpus(URISource(files[1]),
readerControl = list(reader = Rpdf))
corpus.array <- content(content(corpus)[[1]]) ## Store each line in an array
?table
table(corpus.array)
corpus
corpus.array
?reduce
??Reduce
vec <- Reduce(c,corpus.array)
vec
table(vec)
te <- c(corpus.array[0],corpus.array[1])
te
dim(corpus.array)
length(corpus.array)
for(i in length(corpus.array)){}
for(i in length(corpus.array)){ te <- c(te,corpus.array[i])}
te
te <- c(corpus.array[1],corpus.array[2])
te
te <- ""
for(i in length(corpus.array)){ te <- c(te,corpus.array[i])}
te
for(i in length(corpus.array)){ te <- print(c(te,corpus.array[i]))}
for(i in length(corpus.array)){ te <- print(c(te,corpus.array[i]));print i;}
for(i in length(corpus.array)){ te <- print(c(te,corpus.array[i]));print(i);}
for(i in 1:length(corpus.array)){ te <- print(c(te,corpus.array[i]));print(i);}
te
table(te)
?table
table(te,deparse.level = 2)
table(te,deparse.level = 3)
table(te,deparse.level = 2)
table(te,deparse.level = 0)
?TermDocumentMatrix
TermDocumentMatrix(corpus)
td <- TermDocumentMatrix(corpus)
temp <- inspect(td)
FreqMat <- data.frame(ST = rownames(temp),Freq = rowSums(temp))
row.names(FreqMat) <- NULL
FreqMat
?inspect
dim(FreqMat)
data(crude)
slam::row_sums(TermDocumentMatrix(crude))
slam::row_sums(TermDocumentMatrix(corpus))
textFreq <- slam::row_sums(TermDocumentMatrix(corpus))
dim(textFreq)
length(textFreq)
textF <- row_sums(TermDocumentMatrix(corpus))
?slam::row_sums
tf <- TermDocumentMatrix(textFreq)
class(textFreq)
textFreq
textFreq[[1]]
textFreq[1]
as.data.frame(as.table(textFreq))
df <- as.data.frame(as.table(textFreq))
df
dim(df)
library(tm)
files <- list.files(pattern = "pdf$")
Rpdf <- readPDF(control = list(text = "-layout"))
corpus <- VCorpus(URISource(files[1]),
readerControl = list(reader = Rpdf))
corpus.array <- content(content(corpus)[[1]]) ## Store each line in an array
textFreq <- slam::row_sums(TermDocumentMatrix(corpus))
df <- as.data.frame(as.table(textFreq))
df
df[df[df$Freq]]
df[df[df$Freq,]]
df[df[df$Freq],]
df[df[df$Freq==0],]
df[df$Freq==0,]
df[df$Freq,]
min(df[,2])
which.min(df[,2])
df[[1]]
df[[1],1]
df[1,1]
df[1]
df[df$Freq == 1]
df[df$Freq == 1,]
df[df$Freq == min(df[,2]),]
df$Freq == min(df[,2])
df[df$Freq == min(df[,2]),][1]
df[df$Freq == min(df[,2]),][,1]
df[df$Freq == min(df[,2]),][1,1]
df[[1]]
df[which.min(df[,2])]
df
df[which.min(df[,2])]
getwd()
