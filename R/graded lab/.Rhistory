plot(runif(10))
plot(runif(10))
plot(runif(10))
plot(runif(10))
plot(runif(10))
plot(runif(10,n = 10))
plot(runif(10,n = 10,min = 1,max=1000))
plot(runif(n = 10,min = 1,max=1000))
plot(runif(n = 10,min = 1,max=1000))
plot(runif(n = 10,min = 1,max=1000))
plot(runif(n = 10,min = 1,max=1000))
plot(runif(n = 10,min = 1,max=1000))
plot(runif(n = 10,min = 1,max=1000))
plot(runif(n = 10,min = 1,max=1000))
dnow <- data.frame(x=rnorm(100), y=runif(100))
dnow
dnow.head()
dnow.head
head(dnow)
head(dnow,4)
dnow[,]
dnow.x
dnow$x
dnow <- data.frame(x=rnorm(100), y=runif(100),z=runif(100,min=0,max=1))
dnow
dnow[,"z"]
dnow[,"z",drop=FALSE]
dnow[,"z","Y",drop=FALSE]
dnow[,"z","y",drop=FALSE]
dnow[,"y z",drop=FALSE]
dnow[,c(2,3),drop=FALSE]
dnow[,c(2,3)]
v<-c(matrix(1:10,nrows=5,ncol=2),1)
v<-c(matrix(1:10,nrow=5,ncol=2),1)
v
v<-c(matrix(1:10,nrow=5,ncol=2),matrix(1:100,nrow=10,ncol=10))
v
class(v)
class(c(1:10))
class(seq(1,10))
class(seq(1,10,5))
(seq(1,10,5))
seq(1,10)
seq(1,10,1)
seq(1,10,2)
seq(1,10,0.00000000000000009)
seq(1,10,0.00000000009)
seq(1,10,0.00009)
rep(1:10)
rep(1:10,each=110)
rep(1:10,each=10)
rep(0)
rep(0,10)
rep(0:20,10)
rep(0:20,x = 1)
rep(0:20,x = 20)
rep(0:20,times=10)
rep(0:20,each=10)
c(1,T)
c(1,F)
c(T,F)
x <- c(4, “a”, TRUE)
x <- c(4, "a", TRUE)
x
class(x)
paste("a", "b", se = ":")
paste("a", "b", sep = ":")
f <- function(num = 1) {
+        hello <- "Hello, world!\n"
+        for(i in seq_len(num)) {
+                cat(hello)
+         }
+         chars <- nchar(hello) * num
+         chars
+ }
lm
d<-"Hello World\n"
d
nchars(d)
nchar(d)
d<-"Hello World\n"
class(c(1L,2))
args(paste)
nobs()
?nobs()
x<-4
class(x)
x<-4L
class(x)
cbind(1:4,5:8,9:12,0)
rbind(1:4,5:8,9:12,0)
x<-1
x
msg<-'hello'
print msg
msg
print(msg)
msg
x<-1:10
x
cbind(x)
cbind(x,1:2)
cbind(x,1:20)
x<5
x<-5
x
1/Inf
mean(Inf,NaN,1,2,3)
mean(1,2,3)
mean(1,2,3,Inf)
mean(1,2,3,NaN)
mean(1,2,3,NaN,Inf)
mean(2,3,NaN,Inf)
mean(2,3,NaN,Inf,na.rm=FALSE)
mean(3,NaN,Inf,na.rm=FALSE)
mean(3,na,Inf,na.rm=FALSE)
mean(3,NA,Inf,na.rm=FALSE)
iris
mean(iris)
mean(iris$Sepal.Length)
iris.lapply()
?lapply()
lapply(iris$Sepal.Length,iris$Sepal.Length+iris$Sepal.Width)
f<-function(x){}
f<-function(x){}
f<-function(x){x<-x+x}
lapply(iris$Sepal.Length,f)
if(x<5){}
if(x<5){x}
x
if(x=5){x}
if(x==5){x}
join
select.list(iris)
select.list(iris)
mean()
args(mean)
function(mean)
Error in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededError in if (trim > 0 && n) { : missing value where TRUE/FALSE neededquit
View(`%p%`)
View(`%p%`)
paste(1:10,c(10:100000))
1:10%p%c(10:100)
View(boring_function)
View(boring_function)
View(evaluate)
View(evaluate)
View(f)
View(my_mean)
View(telegram)
airquality
set.seed(1)
rpois(5,2)
?dpois
County
county
state
state.name
county
county.name
getwd()
setwd("~/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab")
tempdf <- read.csv("clean_pollution.csv")
unique(tempdf$County.Name)
dim(unique(tempdf$County.Name))
length(unique(tempdf$County.Name))
for(i in 1:length(unique(tempdf$County.Name))){mean(tempdf[tempdf$County.Name == unique(tempdf$County.Name),2])}
for(i in 1:length(unique(tempdf$County.Name))){m<-mean(tempdf[tempdf$County.Name == unique(tempdf$County.Name)[i],2]);m}
m
for(i in 1:length(unique(tempdf$County.Name))){m<-mean(tempdf[tempdf$County.Name == unique(tempdf$County.Name)[i],6]);m}
m
source('~/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab/countyPreprocess.R')
countyPreprocess(tempdf,44201)
source('~/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab/countyPreprocess.R')
countyPreprocess(tempdf,44201)
source('~/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab/countyPreprocess.R')
countyPreprocess(tempdf,44201)
source('~/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab/countyPreprocess.R')
countyPreprocess(tempdf,44201)
uni <- unique(tempdf$County.Name)
uni
length(uni)
class(uni)
source('~/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab/countyPreprocess.R')
class(uni)
countyPreprocess(tempdf,44201)
source('~/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab/countyPreprocess.R')
countyPreprocess(tempdf,44201)
source('~/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab/countyPreprocess.R')
countyPreprocess(tempdf,44201)
source('~/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab/countyPreprocess.R')
countyPreprocess(tempdf,44201)
countyPreprocess(tempdf,44201)
source('~/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab/countyPreprocess.R')
source('~/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab/countyPreprocess.R')
countyPreprocess(tempdf,44201)
source('~/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab/countyPreprocess.R')
countyPreprocess(tempdf,44201)
source('~/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab/countyPreprocess.R')
countyPreprocess(tempdf,44201)
source('~/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab/countyPreprocess.R')
countyPreprocess(tempdf,44201)
install.packages("leaflet")
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m
x<-leaflet()
x
x<-addTiles()
x<-addTiles(x)
x
?setView
x<-setView(x,30.497478,-87.880258,10)
x
x<-setView(x,30.497478,-87.880258,zoom = 1)
x
library(maps)
mapStates = map("state", fill = TRUE, plot = FALSE)
leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
?topo.colors
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m <- leaflet(mapstates) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m <- leaflet(mapStates) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m
m%>%addPolygons()
shiny::runApp('sampleApp')
source('~/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab/helper.R')
runApp('sampleApp')
am_map <- function(var, color, legend.title, min = 0, max = 100) {
# generate vector of fill colors for map
shades <- colorRampPalette(c("white", color))(100)
# constrain gradient to percents that occur between min and max
var <- pmax(var, min)
var <- pmin(var, max)
percents <- as.integer(cut(var, 100,
include.lowest = TRUE, ordered = TRUE))
fills <- shades[percents]
# plot choropleth map
map("state", fill = TRUE, col = fills,
resolution = 0, lty = 0, projection = "polyconic",
myborder = 0, mar = c(0,0,0,0))
# overlay state borders
map("state", col = "white", fill = FALSE, add = TRUE,
lty = 1, lwd = 1, projection = "polyconic",
myborder = 0, mar = c(0,0,0,0))
# add a legend
inc <- (max - min) / 4
legend.text <- c(paste0(min, " % or less"),
paste0(min + inc, " %"),
paste0(min + 2 * inc, " %"),
paste0(min + 3 * inc, " %"),
paste0(max, " % or more"))
legend("bottomleft",
legend = c(min,"","","",max),
fill = shades[c(1:255)],
title = legend.title)
}
runApp('sampleApp')
runApp('sampleApp')
runApp('example.R')
install.packages(maptools)
install.packages(maptools)
install.packages(maptools)
install.packages(maptools)
install.packages(maptools)
install.packages(maptools)
install.packages(maptools)
install.packages(maptools)
install.packages(maptools)
install.packages(maptools)
install.packages(maptools)
install.packages(maptools)
install.packages(maptools)
install.packages("maptools")
runApp('example.R')
install.packages("rgeos")
runApp('example.R')
runApp('sampleApp')
source('~/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab/helper.R')
runApp('sampleApp')
t <- read.csv("clean_pollution.csv")
source('~/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab/statePreprocess.R')
statePreprocess(t,42101)
source('~/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab/countyPreprocess.R')
countyPreprocess(t,42101)
m <- map()
m <- map(state.fips)
library("maps")
m <- map("state")
m <- map("state",fill = T)
m <- map("state",fill = T,plot=F)
m
class(m)
m <- read.csv("42101 _state.csv")
m <- read.csv("42101 _state.csv",what = "sp")
names(m)
l <- leaflet(m)
l <- setView(l,-96,37.8,4)
l <- addProviderTiles(l,"MapBox",options = providerTileOptions(id="mapbox.light",accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
l%>%addPolygons()
class(l)
addPolygons(l)
l
l%>%addPolygons()
class(m)
as.psp.SpatialLinesDataFrame(m)
as.SpatialPolygons.PolygonsList(m)
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
install.packages("geojson")
install.packages("geojsonio")
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
l%>%addPolygons()
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
library(sp)
library(rgeos)
library(rgdal)
library(maptools)
library(dplyr)
library(leaflet)
library(scales)
source('~/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab/statePreprocess.R')
tempdf <- rea.csv("clean_pollution.csv")
tempdf <- read.csv("clean_pollution.csv")
statePreprocess(tempdf,42101)
unique(tempdf$State.Code)
unique(tempdf$State.Name)
source('~/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab/statePreprocess.R')
statePreprocess(tempdf,42101)
source('~/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab/statePreprocess.R')
statePreprocess(tempdf,42101)
statePreprocess(tempdf,42101)
source('~/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab/statePreprocess.R')
statePreprocess(tempdf,42101)
state_dat <- read.csv("42101 state.csv")
state_dat <- read.csv("42101  state.csv")
colnames(state_dat) <- c("GEOID", "airqlty")
state_dat$GEOID <- formatC(state_dat$GEOID, width = 5, format = "d", flag = "0")
us.map <- map("states")
map("states")
map("state")
us.map <- map("state")
leafmap <- merge(us.map,state_dat,by=c("GEOID"))
us.map <- readOGR(dsn = ".", layer = "tl_2016_us_state", stringsAsFactors = FALSE)
us.map <- readOGR(dsn = ".", layer = "cb_2016_us_county_500k", stringsAsFactors = FALSE)
?readOGR
us.map <- readOGR(dsn = "C:\Users\prasanna\Documents\Studies\Semester 6\Data mining\labs\lab1\CSD342-Data-Mining\R\graded lab", layer = "tl_2016_us_state", stringsAsFactors = FALSE)
us.map <- readOGR(dsn = "C:\\Users\\prasanna\\Documents\\Studies\\Semester 6\\Data mining\\labs\\lab1\\CSD342-Data-Mining\\R\\graded lab", layer = "tl_2016_us_state", stringsAsFactors = FALSE)
us.map <- readOGR(dsn = "C:/Users/prasanna/Documents/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab", layer = "tl_2016_us_state", stringsAsFactors = FALSE)
us.map <- readOGR(dsn = "C:/Users/prasanna/Documents/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab/tl_2016_us_state", layer = "tl_2016_us_state", stringsAsFactors = FALSE)
leafmap <- merge(us.map,state_dat,by=c("GEOID"))
leafmap
popup_dat <- paste0("<strong>State: </strong>",
leafmap$NAME,
"<br><strong>Value: </strong>",
leafmap$airqlty)
pal <- colorQuantile("YlOrRd", NULL, n = 20)
leaflet(data = leafmap) %>% addTiles() %>%
addPolygons(fillColor = ~pal(airqlty),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup_dat)
leafmap$airqlty
state_dat$airqlty
leafmap <- merge(us.map,state_dat,by=c("GEOID"))
leaflet(data = leafmap) %>% addTiles() %>%
addPolygons(fillColor = ~pal(airqlty),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup_dat)
leafmap$airqlty
leafmap <- merge(us.map,state_dat,by=c("GEOID"),all = TRUE)
leafmap$airqlty
leafmap <- merge.data.frame(us.map,state_dat,by=c("GEOID"),all = TRUE)
leafmap$airqlty
leaflet(data = leafmap) %>% addTiles() %>%
addPolygons(fillColor = ~pal(airqlty),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup_dat)
leafmap <- merge(us.map,state_dat,by=c("GEOID"),all = TRUE)
leafmap$airqlty
state_dat$GEOID <- formatC(state_dat$GEOID, width = 5, format = "d", flag = "0")
state_dat$airqlty
us.map$GEOID
state_dat$GEIOD
state_dat$GEOID
state_dat$GEOID <- formatC(state_dat$GEOID, width = 2, format = "d", flag = "0")
state_dat$GEOID
state_dat <- read.csv("42101  state.csv")
colnames(state_dat) <- c("GEOID", "airqlty")
state_dat$GEOID
state_dat$GEOID <- formatC(state_dat$GEOID, width = 2, format = "d", flag = "0")
state_dat$GEOID
us.map <- readOGR(dsn = "tl_2016_us_state/", layer = "tl_2016_us_state", stringsAsFactors = FALSE)
us.map <- readOGR(dsn = "C:/Users/prasanna/Documents/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab/tl_2016_us_state", layer = "tl_2016_us_state", stringsAsFactors = FALSE)
leafmap <- merge(us.map, state_dat, by=c("GEOID"))
leafmap$airqlty
popup_dat <- paste0("<strong>state: </strong>",
leafmap$NAME,
"<br><strong>Value: </strong>",
leafmap$airqlty)
pal <- colorQuantile("YlOrRd", NULL, n = 20)
leaflet(data = leafmap) %>% addTiles() %>%
addPolygons(fillColor = ~pal(airqlty),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup_dat)
library(sp)
library(rgeos)
library(rgdal)
library(maptools)
library(dplyr)
library(leaflet)
library(scales)
state_dat <- read.csv("42101  state.csv")
colnames(state_dat) <- c("GEOID", "airqlty")
state_dat$GEOID <- formatC(state_dat$GEOID, width = 2, format = "d", flag = "0")
us.map <- readOGR(dsn = "C:/Users/prasanna/Documents/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab/tl_2016_us_state", layer = "tl_2016_us_state", stringsAsFactors = FALSE)
leafmap <- merge(us.map, state_dat, by=c("GEOID"))
popup_dat <- paste0("<strong>state: </strong>",
leafmap$NAME,
"<br><strong>Value: </strong>",
leafmap$airqlty)
pal <- colorQuantile("YlOrRd", NULL, n = 20)
leaflet(data = leafmap) %>% addTiles() %>%
addPolygons(fillColor = ~pal(airqlty),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup_dat)
runApp('sampleApp')
runApp('sampleApp')
runApp('sampleApp')
source('~/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab/countyPreprocess.R')
countyPreprocess(tempdf = read.csv("clean_pollution"),42101)
countyPreprocess(tempdf = read.csv("clean_pollution.csv"),42101)
ct <- read.csv("clean_pollution.csv")
uct <- unique(ct$County.Code)
ucn <- unique(ct$County.Name)
uct
ucn
length(ucn)
length(uct)
us.map <- readOGR(dsn = "C:/Users/prasanna/Documents/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab/cb_2016_us_county_500k", layer = "tl_2016_us_state", stringsAsFactors = FALSE)
us.map <- readOGR(dsn = "C:/Users/prasanna/Documents/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab/cb_2016_us_county_500k", layer = "cb_2016_us_county_500k", stringsAsFactors = FALSE)
us.map$NAME
con <- read.csv("44201  county.csv")
con <- read.csv("44201 county.csv")
con
colnames(con) <- c("NAME", "airqlty")
m<-merge(us.map,con,by=c("NAME"))
m
m$airqlty
leaflet(data = m) %>% addTiles() %>%
addPolygons(fillColor = ~pal(airqlty),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup_dat)
pal <- colorQuantile("YlOrRd", NULL, n = )
pal <- colorQuantile("YlOrRd", NULL, n = 9)
popup_dat <- paste0("<strong>County: </strong>",
m$NAME,
"<br><strong>Value: </strong>",
m$airqlty)
leaflet(data = m) %>% addTiles() %>%
addPolygons(fillColor = ~pal(airqlty),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup_dat)
m<-merge(us.map,con,by=c("NAME"),all = TRUE)
pal <- colorQuantile("YlOrRd", NULL, n = 9)
popup_dat <- paste0("<strong>County: </strong>",
m$NAME,
"<br><strong>Value: </strong>",
m$airqlty)
leaflet(data = m) %>% addTiles() %>%
addPolygons(fillColor = ~pal(airqlty),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup_dat)
source('~/Studies/Semester 6/Data mining/labs/lab1/CSD342-Data-Mining/R/graded lab/countyPreprocess.R')
countyPreprocess(tempdf = read.csv("clean_pollution.csv"),42101)
pal <- colorQuantile("YlOrRd", domain = m$airqlty, n = 9)
leaflet(data = m) %>% addTiles() %>%
addPolygons(fillColor = ~pal(airqlty),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup_dat)%>%addLegend("bottomright",pal = pal,values = ~airqlty,title = "legends",opacity = 1)
